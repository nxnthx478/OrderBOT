from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

API_TOKEN = "7989455537:AAFhLGq4Ia2JHiduhZ312YUYB0aZ0Bspz9I"
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

CRYPTO_URL = "http://t.me/send?start=IVW2kI5dmez9"

# === –°—Ç–∞—Ä—Ç ===
@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–æ–Ω—è—Ç–Ω–æ", callback_data="main_menu"))
    text = (
        "–ü—Ä–∏–≤–µ—Ç, —Ç—ã –ø–æ–ø–∞–ª –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω Eweiq'a.\n"
        "–¢—ã –æ–ø–ª–∞—á–∏–≤–∞–µ—à—å –∑–∞–∫–∞–∑, –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–∏—à–µ—à—å —Å–≤–æ–π —é–∑–µ—Ä–Ω–µ–π–º,\n"
        "—Å —Ç–æ–±–æ–π —Å–≤—è–∂—É—Ç—Å—è. –ù–∞–¥–µ—é—Å—å, –≤—Å—ë —è—Å–Ω–æ!"
    )
    await msg.answer(text, reply_markup=kb)

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def main_menu(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("–û –º–∞–≥–∞–∑–∏–Ω–µ", callback_data="about"),
        InlineKeyboardButton("–£—Å–ª—É–≥–∏", callback_data="services")
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb)

# === –û –º–∞–≥–∞–∑–∏–Ω–µ ===
@dp.callback_query_handler(lambda c: c.data == "about")
async def about(callback: types.CallbackQuery):
    text = (
        "–û –º–∞–≥–∞–∑–∏–Ω–µ!\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–æ–≤ –æ—Ç —Ç–µ—Ö, —É –∫–æ–≥–æ –¥—Ä—É–≥–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–ª–∏ –ª–µ–Ω—å –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞.\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≠–≤–µ–π–∫—É."
    )
    back = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    await callback.message.edit_text(text, reply_markup=back)

# === –£—Å–ª—É–≥–∏ ===
@dp.callback_query_handler(lambda c: c.data == "services")
async def services(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("–¥–µ—Ñ", callback_data="def"),
        InlineKeyboardButton("—Å–≤–∞—Ç (4$)", callback_data="svat"),
        InlineKeyboardButton("–¥–æ–Ω–æ—Å (3$)", callback_data="donos"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É:", reply_markup=kb)

# === –¥–µ—Ñ ===
@dp.callback_query_handler(lambda c: c.data == "def")
async def def_menu(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("3$ (1 –º–µ—Å—è—Ü)", callback_data="pay_def_month"),
        InlineKeyboardButton("5$ (–Ω–∞–≤—Å–µ–≥–¥–∞)", callback_data="pay_def_lifetime"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="services")
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=kb)

# === –û–ø–ª–∞—Ç–∞ DEF ===
@dp.callback_query_handler(lambda c: c.data in ["pay_def_month", "pay_def_lifetime"])
async def pay_def(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", url=CRYPTO_URL),
        InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")
    )
    await callback.message.edit_text("–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª'", reply_markup=kb)

# === –°–≤–∞—Ç ===
@dp.callback_query_handler(lambda c: c.data == "svat")
async def svat(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", url=CRYPTO_URL),
        InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")
    )
    await callback.message.edit_text(
        "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –§–ò–û, –≥–æ—Ä–æ–¥.\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ '–Ø –æ–ø–ª–∞—Ç–∏–ª'.",
        reply_markup=kb
    )

# === –î–æ–Ω–æ—Å ===
@dp.callback_query_handler(lambda c: c.data == "donos")
async def donos(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", url=CRYPTO_URL),
        InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")
    )
    await callback.message.edit_text(
        "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –§–ò–û, –≥–æ—Ä–æ–¥, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ '–Ø –æ–ø–ª–∞—Ç–∏–ª'.",
        reply_markup=kb
    )

# === –Ø –æ–ø–ª–∞—Ç–∏–ª ===
@dp.callback_query_handler(lambda c: c.data == "paid")
async def paid(callback: types.
               CallbackQuery):
    await callback.message.edit_text(
        "–ù–∞–ø–∏—à–∏ @eweiq –∏ —É–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –æ–ø–ª–∞—Ç–∏–ª, –∞ —Ç–∞–∫–∂–µ –∫–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã–±—Ä–∞–ª.\n\n"
        "–¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω."
    )

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)